name: Flutter CI - Testes

# Quando o workflow roda: em pushes e PRs na branch main (você pode ajustar)
on:
    pull_request

# Jobs paralelos para diferentes plataformas
jobs:
  test:
    # Estratégia de matriz para rodar em múltiplas OS
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        # Você pode adicionar versões de Flutter aqui se quiser testar múltiplas

    steps:
    # Checkout do código
    - uses: actions/checkout@v4

    # Configura o Flutter (instala a versão estável)
    - name: Instalar Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.35.5'  # Especifique a versão do seu projeto (veja pubspec.yaml ou flutter --version)
        channel: 'stable'

    # Verifica se o Flutter está ok
    - name: Verificar Flutter
      run: flutter doctor -v

    # Cache para dependências (acelera builds futuras)
    - name: Cache dependências
      uses: actions/cache@v4
      with:
        path: |
          ~/.pub-cache
          .dart_tool
        key: ${{ runner.os }}-flutter-${{ hashFiles('**/pubspec.lock') }}
        restore-keys: |
          ${{ runner.os }}-flutter-

    # Instala dependências
    - name: Instalar dependências
      run: flutter pub get

    # Roda testes (unitários e widget)
    - name: Rodar Testes
      run: flutter test --coverage  # --coverage gera relatório de coverage (opcional)

    # (Opcional) Upload de artefatos de coverage para análise
    - name: Upload coverage
      if: success()
      uses: codecov/codecov-action@v4
      with:
        file: coverage/lcov.info  # Se você usar --coverage